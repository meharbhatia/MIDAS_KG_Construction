{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red242\green242\blue242;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c95825;\csgray\c0\c85000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21680\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs20 \cf2 \cb3 \CocoaLigature0 >>> predictor = Predictor.from_path("https://s3-us-west-2.amazonaws.com/allennlp/models/srl-model-2018.05.25.tar.gz")\
>>> text = "The Akash eagerly wanted Mehar Sharma's blue coloured jacket, green umbrella of John Sowa, and Ritwik Mishra's big black red jeans"\
>>> text\
"The Akash eagerly wanted Mehar Sharma's blue coloured jacket, green umbrella of John Sowa, and Ritwik Mishra's big black red jeans"\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'wanted', 'description': "[ARG0: The Akash eagerly] [V: wanted] [ARG1: Mehar Sharma 's blue coloured jacket , green umbrella of John Sowa , and Ritwik Mishra 's big black red jeans]", 'tags': ['B-ARG0', 'I-ARG0', 'I-ARG0', 'B-V', 'B-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1']\}], 'words': ['The', 'Akash', 'eagerly', 'wanted', 'Mehar', 'Sharma', "'s", 'blue', 'coloured', 'jacket', ',', 'green', 'umbrella', 'of', 'John', 'Sowa', ',', 'and', 'Ritwik', 'Mishra', "'s", 'big', 'black', 'red', 'jeans']\}\
>>> text = "BYD quickly debuted it's E-SEED GT concept car and Song Pro SUV alongside it's all-new e-series models at the Shanghai International Automobile Industry Exhibition"\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'debuted', 'description': "[ARG0: BYD] [ARGM-MNR: quickly] [V: debuted] [ARG1: it 's E - SEED GT concept car and Song Pro SUV] [ARGM-LOC: alongside it 's all - new e - series models] [ARGM-LOC: at the Shanghai International Automobile Industry Exhibition]", 'tags': ['B-ARG0', 'B-ARGM-MNR', 'B-V', 'B-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'B-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'B-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC']\}, \{'verb': "'s", 'description': "BYD quickly debuted it [V: 's] [ARG2: E - SEED GT concept car] and Song Pro SUV alongside it 's all - new e - series models at the Shanghai International Automobile Industry Exhibition", 'tags': ['O', 'O', 'O', 'O', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\}, \{'verb': "'s", 'description': "BYD quickly debuted it 's E - SEED GT concept car and Song Pro SUV alongside [ARG1: it] [V: 's] [ARG2: all - new e - series models] at the Shanghai International Automobile Industry Exhibition", 'tags': ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-ARG1', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\}], 'words': ['BYD', 'quickly', 'debuted', 'it', "'s", 'E', '-', 'SEED', 'GT', 'concept', 'car', 'and', 'Song', 'Pro', 'SUV', 'alongside', 'it', "'s", 'all', '-', 'new', 'e', '-', 'series', 'models', 'at', 'the', 'Shanghai', 'International', 'Automobile', 'Industry', 'Exhibition']\}\
>>> text ="Outside Oslo, where cars were larger and more upscale than in other parts of Europe, and Tesla vehicles (S and X) are a more common sight than around Los Angeles or the Bay Area, the EQC fit right in."\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'were', 'description': 'Outside [ARGM-LOC: Oslo] , [R-ARGM-LOC: where] [ARG1: cars] [V: were] [ARG2: larger and more upscale than in other parts of Europe] , and Tesla vehicles ( S and X ) are a more common sight than around Los Angeles or the Bay Area , the EQC fit right in .', 'tags': ['O', 'B-ARGM-LOC', 'O', 'B-R-ARGM-LOC', 'B-ARG1', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\}, \{'verb': 'are', 'description': 'Outside Oslo , where cars were larger and more upscale than in other parts of Europe , and [ARG1: Tesla vehicles ( S and X )] [V: are] [ARG2: a more common sight than around Los Angeles or the Bay Area] , the EQC fit right in .', 'tags': ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\}], 'words': ['Outside', 'Oslo', ',', 'where', 'cars', 'were', 'larger', 'and', 'more', 'upscale', 'than', 'in', 'other', 'parts', 'of', 'Europe', ',', 'and', 'Tesla', 'vehicles', '(', 'S', 'and', 'X', ')', 'are', 'a', 'more', 'common', 'sight', 'than', 'around', 'Los', 'Angeles', 'or', 'the', 'Bay', 'Area', ',', 'the', 'EQC', 'fit', 'right', 'in', '.']\}\
>>> text = "At about 187 inches long, the EQC400 4Matic crossover splices into the American mid-sizers."\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'splices', 'description': '[ARGM-LOC: At about 187 inches long] , [ARG1: the EQC400 4Matic crossover] [V: splices] [ARG2: into the American mid - sizers] .', 'tags': ['B-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'I-ARGM-LOC', 'O', 'B-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O']\}], 'words': ['At', 'about', '187', 'inches', 'long', ',', 'the', 'EQC400', '4Matic', 'crossover', 'splices', 'into', 'the', 'American', 'mid', '-', 'sizers', '.']\}\
>>> text = ""Celebrity chef Jamie Oliver's British restaurant chain has become insolvent, putting 1,300 jobs at risk"\
  File "<stdin>", line 1\
    text = ""Celebrity chef Jamie Oliver's British restaurant chain has become insolvent, putting 1,300 jobs at risk"\
                     ^\
SyntaxError: invalid syntax\
>>> text = "Celebrity chef Jamie Oliver's British restaurant chain has become insolvent, putting 1,300 jobs at risk"\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'has', 'description': "Celebrity chef Jamie Oliver 's British restaurant chain [V: has] become insolvent , putting 1,300 jobs at risk", 'tags': ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-V', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']\}, \{'verb': 'become', 'description': "[ARG1: Celebrity chef Jamie Oliver 's British restaurant chain] has [V: become] [ARG2: insolvent] , [ARGM-ADV: putting 1,300 jobs at risk]", 'tags': ['B-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'I-ARG1', 'O', 'B-V', 'B-ARG2', 'O', 'B-ARGM-ADV', 'I-ARGM-ADV', 'I-ARGM-ADV', 'I-ARGM-ADV', 'I-ARGM-ADV']\}, \{'verb': 'putting', 'description': "Celebrity chef Jamie Oliver 's British restaurant chain has become insolvent , [V: putting] [ARG1: 1,300 jobs] [ARG2: at risk]", 'tags': ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-V', 'B-ARG1', 'I-ARG1', 'B-ARG2', 'I-ARG2']\}], 'words': ['Celebrity', 'chef', 'Jamie', 'Oliver', "'s", 'British', 'restaurant', 'chain', 'has', 'become', 'insolvent', ',', 'putting', '1,300', 'jobs', 'at', 'risk']\}\
>>> text = "These aren\'92t your mom\'92s lingerie shades, though."\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'are', 'description': '[ARG1: These] [V: are] [ARGM-NEG: n\'92t] [ARG2: your mom \'92s lingerie shades] , [ARGM-ADV: though] .', 'tags': ['B-ARG1', 'B-V', 'B-ARGM-NEG', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O', 'B-ARGM-ADV', 'O']\}], 'words': ['These', 'are', 'n\'92t', 'your', 'mom', '\'92s', 'lingerie', 'shades', ',', 'though', '.']\}\
>>> text = "These are sexy and shimmery and great for all skin tones."\
>>> predictor.predict(sentence=text)\
\{'verbs': [\{'verb': 'are', 'description': '[ARG1: These] [V: are] [ARG2: sexy and shimmery and great for all skin tones] .', 'tags': ['B-ARG1', 'B-V', 'B-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'I-ARG2', 'O']\}], 'words': ['These', 'are', 'sexy', 'and', 'shimmery', 'and', 'great', 'for', 'all', 'skin', 'tones', '.']\}\
>>> exit()\
}